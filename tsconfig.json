{
  "compilerOptions": {
    // 不生成编译文件
    "noEmit": true,
    // this智能提示
    "noImplicitThis": true,
    "target": "es2017",
    /* 注意：如果未指定--lib，则会注入默认的librares列表。注入的默认库为：
       对于 --target ES5: DOM,ES5,ScriptHost
       对于 --target ES6: DOM,ES6,DOM.Iterable,ScriptHost
       TS 绝不会在您的代码中注入polyfill,所以需要你自己制定编译lib */
    "lib": ["dom", "esnext"],
    // 指定使用模块: 'commonjs', 'amd', 'system', 'umd' or 'es2015'
    "module": "esnext",
    "rootDir": ".",
    "outDir": "dist",
    /* 如果设为true，编译每个ts文件之后会生成一个js文件和一个声明文件,
       declaration和allowJs不能同时设为true */
    "declaration": false,
    // 用于选择模块解析策略，有'node'和'classic'两种类型
    "moduleResolution": "node",
    "removeComments": false,
    "experimentalDecorators": true,
    "noImplicitAny": false,
    // 用来指定允许从没有默认导出的模块中默认导入
    "allowSyntheticDefaultImports": true,
    // 默认false,是否检测定义了但是没使用的变量
    "noUnusedLocals": true,
    // 用于检查是否有在函数体中没有使用的参数
    "noUnusedParameters": true,
    // null类型检测,const teacher: string = null;会报错
    "strictNullChecks": true,
    // 只编译修改过的文件,这个时候会生成tsconfig.tsbuildinfo,下次编译的时候会进行对比只编译修改过的文件 
    "incremental": false,
    // 允许编译JS
    "allowJs": true,
    /* 是否检测JS的语法,例如下面的语法编辑器会报错
      let name = 'paul';
      console.log(name.a.b) */
    "checkJs": false,
    // 指定 jsx 代码的生成: 'preserve', 'react-native', or 'react'
    "jsx": "react",
    // 用来指定编译时是否生成.map文件
    "sourceMap": true,
    // 当target为'ES5' or 'ES3'时，为'for-of', spread, and destructuring'中的迭代器提供完全支持
    "downlevelIteration": false,
    "resolveJsonModule": true,
    "baseUrl": ".",
    "paths": {},
  },
  // 指定需要编译文件 否则默认当前目录下除了exclude之外的所有.ts, .d.ts,.tsx 文件
  "include": [
    "packages/*/src",
    "packages/*/types",
    "packages/*/package.json",
  ],
  "compileOnSave": false,
}
